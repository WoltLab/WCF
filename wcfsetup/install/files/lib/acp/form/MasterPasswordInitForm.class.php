<?php
namespace wcf\acp\form;
use wcf\system\exception\IllegalLinkException;
use wcf\system\exception\UserInputException;
use wcf\system\io\File;
use wcf\system\Regex;
use wcf\system\WCF;
use wcf\util\StringUtil;

/**
 * Shows the master password init form.
 *
 * @author	Marcel Werk
 * @copyright	2001-2012 WoltLab GmbH
 * @license	GNU Lesser General Public License <http://opensource.org/licenses/lgpl-license.php>
 * @package	com.woltlab.wcf
 * @subpackage	acp.form
 * @category	Community Framework
 */
class MasterPasswordInitForm extends MasterPasswordForm {
	/**
	 * master password confirm
	 * @var	string
	 */
	public $confirmMasterPassword = '';
	
	/**
	 * @see	wcf\page\IPage::readParameters()
	 */	
	public function readParameters() {
		parent::readParameters();
		
		if (defined('MASTER_PASSWORD') && defined('MASTER_PASSWORD_SALT')) {
			throw new IllegalLinkException();
		}
	}
	
	/**
	 * @see	wcf\form\IForm::readFormParameters()
	 */
	public function readFormParameters() {
		parent::readFormParameters();
		
		if (isset($_POST['confirmMasterPassword'])) $this->confirmMasterPassword = $_POST['confirmMasterPassword'];
	}
	
	/**
	 * @see	wcf\form\IForm::validate()
	 */
	public function validate() {
		ACPForm::validate();
		
		if (empty($this->masterPassword)) {
			throw new UserInputException('masterPassword');
		}
		
		// check password security
		if (StringUtil::length($this->masterPassword) < 8) {
			throw new UserInputException('masterPassword', 'notSecure');
		}
		// digits
		if (!Regex::compile('\d')->match($this->masterPassword)) {
			throw new UserInputException('masterPassword', 'notSecure');
		}
		// latin characters (lower-case)
		if (!Regex::compile('[a-z]')->match($this->masterPassword)) {
			throw new UserInputException('masterPassword', 'notSecure');
		}
		// latin characters (upper-case)
		if (!Regex::compile('[A-Z]')->match($this->masterPassword)) {
			throw new UserInputException('masterPassword', 'notSecure');
		}
		// special characters
		if (!Regex::compile('[^0-9a-zA-Z]')->match($this->masterPassword)) {
			throw new UserInputException('masterPassword', 'notSecure');
		}
		
		// password equals username
		if ($this->masterPassword == WCF::getUser()->username) {
			throw new UserInputException('masterPassword', 'notSecure');
		}
		
		// search for identical admin passwords
		$sql = "SELECT	password, salt
			FROM	wcf".WCF_N."_user
			WHERE	userID IN (
					SELECT	userID
					FROM	wcf".WCF_N."_user_to_group
					WHERE	groupID = 4
				)";
		$statement = WCF::getDB()->prepareStatement($sql);
		$statement->execute();
		while ($row = $statement->fetchArray()) {
			if (StringUtil::getDoubleSaltedHash($this->masterPassword, $row['salt']) == $row['password']) {
				throw new UserInputException('masterPassword', 'notSecure');
			}
		}
		
		// confirm master password
		if (empty($this->confirmMasterPassword)) {
			throw new UserInputException('confirmMasterPassword');
		}
		
		if ($this->confirmMasterPassword != $this->masterPassword) {
			throw new UserInputException('confirmMasterPassword', 'notEqual');
		}
	}
	
	/**
	 * @see	wcf\form\IForm::save()
	 */
	public function save() {
		// generate salt
		$salt = StringUtil::getRandomID();
		
		// write master password file
		$file = new File(WCF_DIR.'acp/masterPassword.inc.php');
		$file->write("<?php
/** MASTER PASSWORD STORAGE
DO NOT EDIT THIS FILE */
define('MASTER_PASSWORD', '".StringUtil::getSaltedHash($this->masterPassword, $salt)."');
define('MASTER_PASSWORD_SALT', '".$salt."');
?>");
		$file->close();
		@chmod(WCF_DIR.'acp/masterPassword.inc.php', 0777);
		
		parent::save();
	}
	
	/**
	 * @see wcf\page\IPage::assignVariables()
	 */
	public function assignVariables() {
		parent::assignVariables();
		
		WCF::getTPL()->assign(array(
			'confirmMasterPassword' => $this->confirmMasterPassword,
			'exampleMasterPassword' => StringUtil::getRandomPassword(12)
		));
	}
}
