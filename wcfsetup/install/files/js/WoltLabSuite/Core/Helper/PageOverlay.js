define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.adoptPageOverlayContainer = adoptPageOverlayContainer;
    exports.releasePageOverlayContainer = releasePageOverlayContainer;
    exports.getPageOverlayContainer = getPageOverlayContainer;
    const container = document.createElement("div");
    container.id = "pageOverlayContainer";
    const adoptiveParents = [];
    /**
     * Adopts the page overlay container by moving it inside
     * the provided element. Required for dialogs using the
     * native `<dialog>` element to escape the top-level
     * backdrop generated by the browser.
     */
    function adoptPageOverlayContainer(element) {
        adoptiveParents.push(element);
        element.append(container);
    }
    /**
     * Releases the page overlay container again, allowing
     * it to return to its previous position. Must be called
     * in reverse order to ensure the correct placement.
     */
    function releasePageOverlayContainer(element) {
        if (!adoptiveParents.includes(element)) {
            throw new Error("Cannot release the page overlay from a container that (no longer) adopts it.", {
                cause: {
                    element,
                },
            });
        }
        const index = adoptiveParents.indexOf(element);
        if (index === 0) {
            throw new Error("Cannot release the page overlay, there is no previous owner.", {
                cause: {
                    element,
                },
            });
        }
        if (index === adoptiveParents.length - 1) {
            adoptiveParents.pop();
            const previousParent = adoptiveParents[adoptiveParents.length - 1];
            previousParent.append(container);
            return;
        }
        // `element` was an intermediate owner but is no longer holding a reference
        // to it. This can happen when there are nested dialogs and the parent dialog
        // is disposed while the new dialog is being shown.
        adoptiveParents.splice(index, 1);
    }
    /**
     * Returns the global page overlay container used for
     * elements that should be displayed out of context,
     * such as tooltips or drop-down menus.
     */
    function getPageOverlayContainer() {
        return container;
    }
});
